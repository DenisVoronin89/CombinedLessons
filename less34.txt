zoo - manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'zoo.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

mainapp - tasks.py
import time
from celery import shared_task
from django.core.mail import send_mail


@shared_task
def get_metrics(url, method):
    time.sleep(120)
    print('request method', method, 'on url', url)
    return 'I HAVE GOT METRICKS'


@shared_task
def send_email_task(from_email, to_email, title, text):
    send_mail(title, text, from_email, [to_email])



mainapp - models.py
from django.db import models

# Create your models here.
# Животные, надо кормить, разной едой, делятся на категории, медведи, попугаи, ...
# Карточка - описание животного
#


class Food(models.Model):
    name = models.CharField(max_length=32, unique=True)
    # categories = models.ManyToManyField(Category)
    # Date
    # DateTime
    # Timestamp
    # models.DateField
    # models.DateTimeField
    # models.TimeField
    # Number (Int)
    # models.IntegerField
    # models.PositiveIntegerField
    # models.SmallIntegerField
    # models.PositiveSmallIntegerField
    # Float
    # models.FloatField
    # models.DecimalField
    # Bool
    # models.BooleanField
    # Blob, clob
    # models.BinaryField
    # models.ImageField
    # models.FileField
    # Enum
    # models.CharField(max_length=32, unique=True, choices=)
    # models.URLField
    # models.EmailField

    def __str__(self):
        return self.name


class Category(models.Model):
    # Медведь, Белый медведь
    name = models.CharField(unique=True, max_length=32)
    is_active = models.BooleanField(default=True)
    max_age = models.PositiveIntegerField(default=50)
    foods = models.ManyToManyField(Food)

    def __str__(self):
        return self.name


class Animal(models.Model):
    name = models.CharField(max_length=32)
    # 1-1, 1-*, *-*
    # cascade, protect, setnull
    category = models.ForeignKey(Category, on_delete=models.CASCADE)

    def __str__(self):
        return self.name


class Card(models.Model):
    text = models.TextField(blank=True, null=True)
    animal = models.OneToOneField(Animal, on_delete=models.CASCADE)

    def __str__(self):
        return self.animal.name








mainapp - __init__.py

mainapp - apps.py
from django.apps import AppConfig


class MainappConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'mainapp'

mainapp - forms.py
from django import forms
from .models import Category
from .models import Food


class CategoryForm(forms.ModelForm):

    name = forms.CharField(label='Имя', widget=forms.TextInput(attrs={'class': 'form-control'}))

    max_age = forms.IntegerField(initial=50, widget=forms.NumberInput(
        attrs={
            'placeholder': 'максимальный возраст',
            'class': 'form-control'
        }
    ))

    foods = forms.ModelMultipleChoiceField(queryset=Food.objects.all(), widget=forms.CheckboxSelectMultiple(
        # attrs={'class': "form-check-input"}
    ))

    class Meta:
        model = Category
        # fields = '__all__'
        # fields = ('name', 'foods')
        exclude = ('is_active',)
mainapp - admin.py
from django.contrib import admin
from .models import Category, Animal, Food, Card

# Register your models here.
admin.site.register(Animal)
admin.site.register(Category)
admin.site.register(Food)
admin.site.register(Card)
mainapp - tests.py
from django.test import TestCase

# Create your tests here.

mainapp - views.py
from django.shortcuts import render
from .models import Animal, Category
from .tasks import get_metrics, send_email_task
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from .forms import CategoryForm


def index_view(request):
    # result = get_metrics.delay(url=request.path, method=request.method)
    # result = get_metrics.delay(url=request.path, method=request.method)
    # animals = Animal.objects.all().select_related('category')
    animals = Animal.objects.all().select_related('category').prefetch_related('category__foods')
    # animals = Animal.objects.all().prefetch_related('category__foods')

    return render(request, 'mainapp/index.html', {'animals': animals})


def contact_view(request):
    if request.method == 'POST':
        text = request.POST.get('text')
        send_email_task.delay(
            from_email='admin@admin',
            to_email='help@admin.com',
            title='to us',
            text=text
        )
        return render(request, 'mainapp/contact.html')
    return render(request, 'mainapp/contact.html')


def get_task_result_view(request, task_id):
    result = get_metrics.AsyncResult(task_id)

    context = {
        'task_id': result.id,
        'status': result.status,
        'result': result.result
    }
    return render(request, 'mainapp/task_result.html', context=context)


# CRUD - Create Read Update Delete
# 5 страниц

class CategoryListView(ListView):
    model = Category
    # template_name =
    # context_object_name =

    def get(self, request, *args, **kwargs):
        print('REQUEST', request)
        return super().get(request, *args, **kwargs)

    def get_queryset(self):
        return Category.objects.filter(is_active=True)

    def get_context_data(self, *args, **kwargs):
        context = super().get_context_data(*args, **kwargs)
        context['promo'] = 'Реклманое сообщение'
        return context


class CategoryDetailView(DetailView):
    model = Category

    # def get(self):
    #     pass
    #
    # def get_queryset(self):
    #     pass
    #
    # def get_object(self, queryset=None):
    #     pass
    #
    # def get_context_data(self, **kwargs):
    #     pass

# get
# создать форму
# вывести на страницу
# post
# получить данные
# записать их в форму
# валидация данных
# сохранить если валидны
# если не валидны вывести форму обратно
# редирект


class CategoryCreateView(CreateView):
    model = Category
    # fields = '__all__'
    form_class = CategoryForm
    success_url = '/category-list/'

    # def get_form_kwargs(self):
    #     pass
    #
    # def get(self):
    #     pass
    #
    # def get_context_data(self, **kwargs):
    #     pass
    #
    # def post(self):
    #     pass
    #
    # def form_valid(self, form):
    #     pass
    #
    # def form_invalid(self, form):
    #     pass

    # def get_success_url(self):
    #     pass


class CategoryUpdateView(UpdateView):
    model = Category
    fields = '__all__'
    success_url = '/category-list/'


class CategoryDeleteView(DeleteView):
    model = Category
    success_url = '/category-list/'

    # def get_success_url(self):
    #     pass
migrations - __init__.py

migrations - 0002_category_is_active.py
# Generated by Django 4.1.7 on 2023-03-20 18:02

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('mainapp', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='category',
            name='is_active',
            field=models.BooleanField(default=True),
        ),
    ]

migrations - 0001_initial.py
# Generated by Django 4.1.7 on 2023-03-15 18:06

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Animal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('foods', models.ManyToManyField(to='mainapp.food')),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, null=True)),
                ('animal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='mainapp.animal')),
            ],
        ),
        migrations.AddField(
            model_name='animal',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.category'),
        ),
    ]

migrations - 0003_category_max_age.py
# Generated by Django 4.1.7 on 2023-03-20 18:12

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('mainapp', '0002_category_is_active'),
    ]

    operations = [
        migrations.AddField(
            model_name='category',
            name='max_age',
            field=models.PositiveIntegerField(default=50),
        ),
    ]

management - __init__.py

commands - fill_db.py
from django.core.management.base import BaseCommand, CommandError
from mainapp.models import Category, Animal, Food


class Command(BaseCommand):
    help = 'Fill db'

    def handle(self, *args, **options):
        # create, update, delete
        # delete
        Food.objects.all().delete()
        Category.objects.all().delete()

        # create
        category = Category.objects.create(name='Медведь')
        print(category)
        print(type(category))
        print(category.name)

        # update
        category.name = 'Жук'
        category.save()

        # delete
        category.delete()

        bear = Category.objects.create(name='Медведь')
        parrot = Category.objects.create(name='Попугай')

        # FK
        boris = Animal.objects.create(name='Борис', category=bear)
        leo = Animal.objects.create(name='Лео', category=bear)
        kate = Animal.objects.create(name='Kate', category=parrot)

        # Many to Many
        banana = Food.objects.create(name='Банан')
        seeds = Food.objects.create(name='Семена')
        honey = Food.objects.create(name='Мед')

        # Посмотреть запрос в shell
        bear.foods.clear()
        bear.foods.add(banana)
        bear.foods.add(honey)
        bear.save()

        parrot.foods.clear()
        parrot.foods.add(seeds)
        parrot.foods.add(banana)
        parrot.save()

        # select запросы
        # 1. Выбрать все данные
        print(Category.objects.all())

        # 2. Выбор 1-го
        # 1-ый
        print(Category.objects.all().first())
        # get
        print(Category.objects.get(id=bear.id))
        print(Category.objects.get(id=bear.id).id)

        # 3. Filter
        bears = Category.objects.filter(name='Медведь')
        print(bears)

        bears = Category.objects.filter(name='Медведь', is_active=True)
        print(bears)

        # Взять все катигории с названием не Медведь
        bears = Category.objects.exclude(name='Медведь')
        print(bears)

        # Взять все активные категории, кроме медведь
        bears = Category.objects.filter(is_active=True).exclude(name='Медведь')
        print(bears)

        # Взять категории которые живут больше 30 лет
        categorys = Category.objects.filter(max_age__gt=30)
        print(categorys)
        # Имя категории содержит "ведь"
        categorys = Category.objects.filter(name__contains='ведь')
        print(categorys)

        # выбрать животных с именем категории медведь
        animals = Animal.objects.filter(category__name='Медведь')
        print(animals)
        # выбрать животных с имененм категории на букву М
        animals = Animal.objects.filter(category__name__istartswith='М')
        print(animals)

        print('Many to many')

        # Кто ест банан? M * M
        category = Category.objects.filter(foods=banana)
        print(category)

        # Кто ест банан или семена? M * M
        category = Category.objects.filter(foods__in=[banana, seeds])
        print(category)

        # Кто ест банан или семена? M * M
        category = Category.objects.filter(foods__name__in=['Банан', 'Семена']).distinct()
        print(category)

        print(category)
        print('DONE')
commands - __init__.py

zoo - asgi.py
"""
ASGI config for zoo project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'zoo.settings')

application = get_asgi_application()

zoo - __init__.py
# This will make sure the app is always imported when
# Django starts so that shared_task will use this app.
from .celery import app as celery_app

__all__ = ('celery_app',)
zoo - celery.py
import os

from celery import Celery

# celery -A tasks worker --loglevel=INFO

# Set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'zoo.settings')

app = Celery('zoo', backend='rpc://')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
# - namespace='CELERY' means all celery-related configuration keys
#   should have a `CELERY_` prefix.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django apps.
app.autodiscover_tasks()
zoo - settings.py
"""
Django settings for zoo project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os.path
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2#q777g_2e$gdkfjz#smxh+q9(05rzm4yu%1n0q3ubcheq*@eu'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # other
    "debug_toolbar",
    # my
    'mainapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'zoo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'zoo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
EMAIL_FILE_PATH = 'tmp/app-messages'

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]
zoo - urls.py
"""zoo URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
# from mainapp.views import index_view, contact_view, get_task_result_view
from mainapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index_view),
    path('contact/', views.contact_view),
    path('task-result/<str:task_id>/', views.get_task_result_view),
    path('__debug__/', include('debug_toolbar.urls')),
    # CRUD
    path('category-list/', views.CategoryListView.as_view()),
    path('category-detail/<int:pk>/', views.CategoryDetailView.as_view()),
    path('category-create/', views.CategoryCreateView.as_view()),
    path('category-update/<int:pk>/', views.CategoryUpdateView.as_view()),
    path('category-delete/<int:pk>/', views.CategoryDeleteView.as_view()),
]

zoo - wsgi.py
"""
WSGI config for zoo project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'zoo.settings')

application = get_wsgi_application()

